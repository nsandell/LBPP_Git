package tests;

import java.util.Vector;

import complex.metrics.Coherence;
import complex.metrics.Coherence.DisagreementMeasure;

public class CoherenceTest {

	private static class CoDatTest implements DisagreementMeasure
	{
		@Override
		public double getDisagreement(int t) {
			return data[t];
		}
		
		double[] data;
	}
	/**
	 * @param args
	 */
	public static void main(String[] args)
	{
		double[][] data = new double[][]{
				{0.125460, 0.134702, 0.544833, 0.165471, 0.256692, 0.447890, 0.114028, 0.879278, 0.028902, 0.258163, 0.468952, 0.411185, 0.925232, 0.996880, 0.045395, 0.727697, 0.132874, 0.088679, 0.953540, 0.076710, 8.173772, 8.640389, 8.387064, 8.182192, 8.814578, 8.040492, 8.983497, 8.900975, 8.260548, 8.021300, 8.168880, 8.365384, 8.650749, 8.638601, 8.832243, 8.182716, 8.437276, 8.058124, 8.898425, 8.476161},
				{0.752243, 0.450517, 0.901124, 0.028134, 0.885618, 0.651249, 0.442541, 0.557858, 0.009085, 0.732854, 0.087265, 0.236489, 0.215889, 0.358969, 0.841730, 0.650987, 0.439204, 0.250852, 0.162796, 0.354473, 8.651401, 8.007356, 8.421038, 8.065436, 8.089437, 8.424523, 8.248344, 8.214238, 8.084822, 8.879986, 8.745167, 8.585099, 8.817371, 8.592075, 8.359910, 8.101215, 8.669088, 8.339707, 8.850706, 8.994906},
				{0.827052, 0.572275, 0.051827, 0.955370, 0.920043, 0.169502, 0.659548, 0.752334, 0.596452, 0.116761, 0.828717, 0.195055, 0.001009, 0.625243, 0.048250, 0.664615, 0.547643, 0.447559, 0.970455, 0.132011, 8.498696, 8.106421, 8.640077, 8.610350, 8.731279, 8.540215, 8.606356, 8.547061, 8.298133, 8.798170, 8.477134, 8.183337, 8.766266, 8.325289, 8.076238, 8.201584, 8.547696, 8.817176, 8.256792, 8.490579},
				{0.781430, 0.792023, 0.808603, 0.680291, 0.300063, 0.531449, 0.294773, 0.894901, 0.609049, 0.746042, 0.685945, 0.705379, 0.906606, 0.393367, 0.316320, 0.938780, 0.395136, 0.637961, 0.597007, 0.158180, 8.284511, 8.106794, 8.787553, 8.701553, 8.903857, 8.953828, 8.816695, 8.784709, 8.917129, 8.324165, 8.653445, 8.076919, 8.374176, 8.988951, 8.556926, 8.134746, 8.609054, 8.377548, 8.285496, 8.503453},
				{0.190883, 0.419737, 0.334905, 0.860562, 0.073391, 0.633801, 0.950368, 0.841844, 0.918923, 0.809789, 0.267325, 0.180548, 0.680042, 0.007662, 0.783419, 0.535081, 0.398272, 0.709445, 0.240227, 0.062147, 8.830560, 8.367109, 8.269994, 8.111618, 8.452232, 8.208906, 8.830054, 8.194441, 8.470518, 8.669044, 8.966576, 8.153663, 8.189862, 8.123236, 8.273930, 8.323789, 8.863135, 8.972605, 8.779947, 8.768773},
				{0.428641, 0.532537, 0.228683, 0.939094, 0.767399, 0.014096, 0.694286, 0.130857, 0.733574, 0.745234, 0.969484, 0.522333, 0.514952, 0.545285, 0.972400, 0.398440, 0.751349, 0.992620, 0.070295, 0.701843, 8.818360, 8.239608, 8.843982, 8.095824, 8.070688, 8.116332, 8.489039, 8.746889, 8.269468, 8.296294, 8.313027, 8.826876, 8.646502, 8.735877, 8.132055, 8.950545, 8.380696, 8.605319, 8.701395, 8.388084},
				{0.014457, 0.925704, 0.822402, 0.680194, 0.084952, 0.470371, 0.206807, 0.189154, 0.301147, 0.337143, 0.183774, 0.296172, 0.522069, 0.509110, 0.586464, 0.670458, 0.522350, 0.932195, 0.300041, 0.086482, 8.938169, 8.346140, 8.740468, 8.597834, 8.241278, 8.646220, 8.760728, 8.475558, 8.762970, 8.929952, 8.076439, 8.300957, 8.003605, 8.156617, 8.699655, 8.532131, 8.748956, 8.338236, 8.492512, 8.453259},
				{0.325285, 0.899082, 0.348235, 0.917424, 0.728764, 0.886326, 0.554762, 0.153640, 0.495574, 0.584325, 0.299941, 0.462782, 0.102919, 0.246779, 0.778044, 0.440534, 0.490433, 0.092229, 0.813545, 0.616787, 8.000326, 8.249620, 8.826102, 8.812233, 8.731865, 8.108411, 8.915108, 8.583259, 8.772172, 8.281960, 8.791415, 8.383884, 8.282888, 8.434647, 8.485905, 8.247686, 8.156697, 8.927984, 8.967668, 8.132854},
				{0.758506, 0.725870, 0.176156, 0.136195, 0.119665, 0.031688, 0.304881, 0.222223, 0.466425, 0.557503, 0.345003, 0.901981, 0.247886, 0.204217, 0.119863, 0.437535, 0.409894, 0.133715, 0.815556, 0.615725, 0.689125, 0.757273, 0.580006, 0.280397, 0.180468, 0.155461, 0.380364, 0.970523, 0.287584, 0.637523, 0.394657, 0.185885, 0.658453, 0.117545, 0.218538, 0.065076, 0.969765, 0.541606, 0.700879, 0.571023},
				{0.565237, 0.339446, 0.431186, 0.694556, 0.886598, 0.724936, 0.319373, 0.083609, 0.786996, 0.299785, 0.328633, 0.595707, 0.554425, 0.662279, 0.518970, 0.320840, 0.371188, 0.419228, 0.752113, 0.304960, 0.717881, 0.546692, 0.909952, 0.259427, 0.930599, 0.502367, 0.396569, 0.608886, 0.816713, 0.424286, 0.258991, 0.291448, 0.158804, 0.174038, 0.870961, 0.509456, 0.386794, 0.314993, 0.179986, 0.422041},
				{0.648637, 0.272681, 0.475655, 0.515679, 0.970289, 0.144159, 0.784980, 0.073702, 0.422568, 0.159073, 0.927486, 0.068536, 0.229585, 0.914742, 0.821975, 0.134052, 0.226854, 0.506861, 0.789256, 0.766968, 0.559029, 0.357388, 0.636006, 0.547096, 0.045152, 0.567733, 0.576742, 0.719666, 0.450528, 0.905531, 0.847912, 0.461664, 0.802663, 0.627409, 0.211836, 0.620798, 0.993428, 0.159327, 0.803668, 0.721156},
				{0.798058, 0.170275, 0.785221, 0.542582, 0.942526, 0.635927, 0.503736, 0.769552, 0.943730, 0.665256, 0.756072, 0.218043, 0.006913, 0.006903, 0.637023, 0.134585, 0.446031, 0.324325, 0.501267, 0.267229, 0.533354, 0.700998, 0.525561, 0.541268, 0.240646, 0.188272, 0.019402, 0.302752, 0.806633, 0.417321, 0.945056, 0.346977, 0.408580, 0.841890, 0.836665, 0.733567, 0.326393, 0.152616, 0.513956, 0.073138},
				{0.220448, 0.664018, 0.130652, 0.808484, 0.638128, 0.789848, 0.260997, 0.817677, 0.001314, 0.684203, 0.288239, 0.869408, 0.766639, 0.746423, 0.953910, 0.805948, 0.266221, 0.684689, 0.555182, 0.039506, 0.875724, 0.109222, 0.259623, 0.788113, 0.008855, 0.324196, 0.577580, 0.459022, 0.790173, 0.154058, 0.377000, 0.318166, 0.327392, 0.510083, 0.859302, 0.229996, 0.137161, 0.136951, 0.548438, 0.594862},
				{0.857891, 0.535852, 0.051356, 0.793686, 0.090590, 0.566253, 0.732476, 0.740426, 0.981268, 0.792409, 0.606180, 0.414218, 0.021833, 0.799671, 0.946926, 0.524764, 0.459096, 0.443094, 0.630750, 0.296562, 0.393099, 0.006611, 0.051171, 0.869606, 0.671594, 0.716037, 0.932196, 0.048029, 0.282958, 0.539999, 0.067280, 0.459915, 0.746015, 0.165764, 0.523377, 0.021872, 0.384754, 0.709803, 0.207845, 0.861977},
				{0.904729, 0.829109, 0.627506, 0.501867, 0.074708, 0.377414, 0.162950, 0.758249, 0.570194, 0.348624, 0.766029, 0.661209, 0.393103, 0.907799, 0.966605, 0.944257, 0.432905, 0.435663, 0.097989, 0.556365, 0.458067, 0.597302, 0.731950, 0.787541, 0.904813, 0.552929, 0.106873, 0.385352, 0.068309, 0.937091, 0.181582, 0.235895, 0.746352, 0.714305, 0.477363, 0.138989, 0.562636, 0.464864, 0.784589, 0.448801},
				{0.292020, 0.267362, 0.029088, 0.276632, 0.182451, 0.821586, 0.921075, 0.961195, 0.346471, 0.250075, 0.846152, 0.783485, 0.252540, 0.974574, 0.067344, 0.988340, 0.259623, 0.793024, 0.245676, 0.969074, 0.208245, 0.659176, 0.164291, 0.969428, 0.572416, 0.142282, 0.732150, 0.361716, 0.054931, 0.660955, 0.575748, 0.027752, 0.173955, 0.907037, 0.889883, 0.769507, 0.633835, 0.113271, 0.526490, 0.652577}};
	
		Vector<CoDatTest> dat = new Vector<CoDatTest>();
		for(int i = 0; i < 16; i++)
		{
			dat.add(new CoDatTest());
			dat.get(i).data = data[i];
		}
		
		boolean[] membership = Coherence.partition(dat, data[0].length);
		
		for(int i = 0; i < membership.length; i++)
			System.out.println(membership[i]);
	}
}
